from sys import platform

libname = 'Distillate';

IncludePath = ['include/']
LibsPath = ['/usr/lib/X11']   
Libs = []

CommonFlags = ' -Wall -pedantic'

debug    = ARGUMENTS.get('debug', 'true')
linkage  = ARGUMENTS.get('linkage', 'static')

render   = ARGUMENTS.get('render', 'sdl')
input    = ARGUMENTS.get('input', '')

libenv = Environment( CPPFLAGS = CommonFlags)

if debug == 'true':
    libenv.Append(CPPFLAGS = ' -g -ggdb')
    libenv.Append(CPPDEFINES = ['DEBUG'])

if render == 'sdl':
    libenv.Append(CPPDEFINES = ['SDL_RENDER'])
    Libs.append('SDL')
    Libs.append('SDL_image')
    Libs.append('SDL_ttf')
    Libs.append('SDL_gfx')
    Libs.append('SDL_mixer')

elif render == 'gl':
    libenv.Append(CPPDEFINES = ['GL_RENDER'])
    Libs.append('GL')
    Libs.append('GLU')
    if platform == 'linux2':
        Libs.append('X11')
        Libs.append('Xxf86vm')
        Libs.append('png')

if input == 'sdl':
    libenv.Append(CPPDEFINES = ['SDL_INPUT'])
    Libs.append('SDL')

files = Split("""
DEmitter.cpp
DGame.cpp
DGlobals.cpp
DGroup.cpp
DKeyboard.cpp
DMouse.cpp
DObject.cpp
DQuadTree.cpp
DResourceManager.cpp
DSound.cpp
DSoundResource.cpp
DSprite.cpp
DState.cpp
DText.cpp
DTextureResource.cpp
DTTFResource.cpp
DUtils.cpp
""");

if linkage == 'static':
    lib = libenv.StaticLibrary(target = "../%s" % libname, source = files, CPPPATH = IncludePath, LIBS = Libs, LIBPATH = LibsPath)
elif linkage == 'shared':
    lib = libenv.SharedLibrary(target = "../%s" % libname, source = files, CPPPATH = IncludePath, LIBS = Libs, LIBPATH = LibsPath)

